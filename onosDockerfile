ARG DISTRIBUTION_TARGET=alpine
ARG BUILD_TARGET=openjdk:8-slim
#### Taken from official onosproject github and inserted commands to inject custom app TODO: Attribution, Readme, etc. ####
# First stage is the build environment
FROM ${BUILD_TARGET} as builder

# Set the environment variables
ENV HOME /root
ENV BUILD_NUMBER docker
ENV JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8

# Copy in the source
RUN apt-get update && apt-get install -y git && mkdir /src && cd /src/ && git clone --branch 1.13.2 https://github.com/opennetworkinglab/onos.git
COPY onosApp/ioannidis.onosApp /src/onos/apps/project.ioannidis.onosApp
WORKDIR /src/onos
RUN awk '/ONOS_APPS =/ { print; print "'\''//apps/project.ioannidis.onosApp:onos-apps-project.ioannidis.onosApp-oar'\'',"; next }1' /src/onos/modules.defs > temp.txt &&  mv temp.txt /src/onos/modules.defs 
# Build ONOS
# We extract the tar in the build environment to avoid having to put the tar
# in the runtime environment - this saves a lot of space
# FIXME - dependence on ONOS_ROOT and git at build time is a hack to work around
# build problems
RUN apt-get install -y curl zip python git bzip2 && \
        export ONOS_ROOT=/src/onos && \
        /src/onos/tools/build/onos-buck build onos && \
        mkdir -p /src/tar && \
        cd /src/tar && \
        tar -xf /src/onos/buck-out/gen/tools/package/onos-package/onos.tar.gz --strip-components=1 && \
        rm -rf /src/onos/buck-out .git

#### SECOND STAGE IS THE VESSEL FOR DISTRIBUTION - Will be used to build for different architectures and is unusable per se####
FROM ${DISTRIBUTION_TARGET}

# Change to /root directory
RUN mkdir -p /root/onos
WORKDIR /root/onos


# Copy ONOS binaries
COPY --from=builder /src/tar/ .
RUN ls -la && du -hcs
